/**
 * Connect Four AI by peter_k
 *
 * This single file is to create functions for quick board usage -> board.c
 *
 */

#include <cstdlib>
#include <iostream>
#include <fstream>

using namespace std;

typedef struct sBoardSize {
	int width;
	int height;
} tBoardSize;

void setBit(unsigned long long &number, int bit) {
	unsigned long long tmp = 1;

	if (!((bit>=0)&&(bit<=63)))
	  return;
	while(bit--)
	  tmp*=2;
	number |= tmp;
}

int main(int argc, char *argv[])
{
	const int boardNumber = 1;
	const tBoardSize boardList[boardNumber] = {{4, 4}/*, {7, 6}, {7, 7}, {8, 7}*/};
	ofstream output;
	int actualBoard;
	int column;
	int line;
	int height;
	unsigned long long longNumber;
	unsigned long long longNumber2;
	
	/*longNumber=0;
	setBit(longNumber, 3);
	setBit(longNumber, 7);
	setBit(longNumber, 11);
	setBit(longNumber, 15);
	cout << longNumber << endl;
	system("pause");
	return 0;*/

	output.open("boards.c");
	output
	<< "/* Code below was generated by a machine, so please don't edit */\n\n"
	<< "class board {\n"
	<< "	public:\n"
	<< "	unsigned long long board[2];\n"
	<< "	int actualPlayer;\n\n"
	<< "	inline void clear() {\n"
	<< "		board[0] = 0;\n		board[1] = 0;\n		actualPlayer = 0;\n"
	<< "	}\n";
	for (actualBoard=0; actualBoard<boardNumber; actualBoard++) {
		output
		<< "	inline int putToken" << boardList[actualBoard].width << boardList[actualBoard].height << "(int column);\n"
		<< "	inline int removeToken" << boardList[actualBoard].width << boardList[actualBoard].height << "(int column);\n";
	}
	output
	<< "};\n\n";
	
	/**
	 * putToken
	 */
	for (actualBoard=0; actualBoard<boardNumber; actualBoard++) {
		output
		<< "inline board::putToken" << boardList[actualBoard].width << boardList[actualBoard].height << "(int column) {\n"
		<< "	switch(column) {\n";
		for (column = 0; column < boardList[actualBoard].width; column++) {
			longNumber = 0;
			for (line=0; line<boardList[actualBoard].height; line++)
			  setBit(longNumber, line*boardList[actualBoard].height+column);
			output
			<< "		case " << column << ":\n"
			<< "			switch((board[0]|board[1])&" << longNumber << ") {\n";
			longNumber=0;
			for (height=0; height<boardList[actualBoard].height; height++) {
   			for (line=0; line<height; line++)
				  setBit(longNumber, line*boardList[actualBoard].height+column);
				longNumber2=0;
				setBit(longNumber2, height*boardList[actualBoard].height+column);
				output
				<< "				case " << longNumber << ":\n"
				<< "					board[actualPlayer]|=" << longNumber2 << ";\n"
				<< "					break;\n";
			}
			/* if row is busy */
			setBit(longNumber, column);
			output
			<< "				case " << longNumber << ":\n"
			<< "					return -2;\n"
			<< "					break;\n";
			/* - */
			output
			<< "			break;\n";
		}
		output
		<< "	};\n"
		<< "}\n\n";
	}
	
	output.close();

	//system("PAUSE");
	return EXIT_SUCCESS;
}
