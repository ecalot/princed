/**
 * Connect Four AI by peter_k
 *
 * This single file is to create functions for quick board usage -> board.c
 *
 */

#include <cstdlib>
#include <iostream>
#include <fstream>

using namespace std;

typedef struct sBoardSize {
	int width;
	int height;
} tBoardSize;

int main(int argc, char *argv[])
{
	const int boardNumber = 1;
	const tBoardSize boardList[boardNumber] = {{4, 4}/*, {7, 6}, {7, 7}, {8, 7}*/};
	ofstream output;
	int actualBoard;
	int i;
	
	output.open("boards.c");
	output
	<< "/* Code below was generated by a machine, so please don't edit */\n\n"
	<< "class board {\n"
	<< "	public:\n"
	<< "	unsigned long long board[2];\n"
	<< "	int actualPlayer;\n\n"
	<< "	inline void clear() {\n"
	<< "		board[0] = 0;\n		board[1] = 0;\n		actualPlayer = 0;\n"
	<< "	}\n";
	for (actualBoard=0; actualBoard<boardNumber; actualBoard++) {
		output
		<< "	inline int putToken" << boardList[actualBoard].width << boardList[actualBoard].height << "(int column);\n"
		<< "	inline int removeToken" << boardList[actualBoard].width << boardList[actualBoard].height << "(int column);\n";
	}
	output
	<< "};\n\n";
	
	for (actualBoard=0; actualBoard<boardNumber; actualBoard++) {
		output
		<< "inline board::putToken" << boardList[actualBoard].width << boardList[actualBoard].height << "(int column) {\n"
		<< "	switch(column) {\n";
		for (i = 0; i < boardList[actualBoard].width; i++) {
			output
			<< "		case " << i << ":\n"
			<< "			break;\n";
		}
		output
		<< "	};\n"
		<< "}\n\n";
	}
	
	output.close();

	//system("PAUSE");
	return EXIT_SUCCESS;
}
