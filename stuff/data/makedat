#!/bin/bash

#configure colors
NO_COLOR="\033[0m"
LGREEN="\033[01;32m"
LRED="\033[01;31m"

SDONE="[$LGREEN Done$NO_COLOR ]"
SOK="[$LGREEN  OK $NO_COLOR ]"
SFAIL="[$LRED Fail$NO_COLOR ]"

#setup
numberstart=1
VARDEFINE="#define"
VARDEFSTART="DATA_START_ITEMS"
VARDEFEND="DATA_END_ITEMS"

#check for dirs
if [ -d def ]
then
	FAIL=0
else
	FAIL=1
	echo "Directory def does not exist" >> error_log
fi

FILES=`ls def/*.def 2>/dev/null`

if [ -z "$FILES" -a $FAIL == 0 ]
then
	FAIL=1
	echo "Directory def does not contain information" >> error_log
fi

#initializes output files
number=$numberstart
mkdir -p result
mkdir -p proc
mkdir -p index
mkdir -p xml
echo -n "Generating header and xml files              "
cp -f result/data.h result/data.h.bak 2>/dev/null >/dev/null
echo -e "/* data.h: Auto generated file header for resources */\n">result/data.h
cat xml/gen1.xml > xml/resources.xml

#process and add all definitions to the xml and h files
if [ $FAIL == 0 ]
then
	for definition in def/*.def
	do
		#define variables and convert the resource type
		definition=`echo $definition|sed -e "s/def\/\(.*\)\.def/\1/g"`
		FDEF="def/$definition.def"
		FPROC="proc/$definition.p"
		FINDEX="index/$definition.index"
		TYPE=`sed -e '1,1d' -e '3,$d' $FDEF`
		LINEX="^$VARDEFINE RES_TYPE_$TYPE \([0-9]*\)\$"
		ID=`grep -e "$LINEX" result/types.h|sed -e "s/$LINEX/\1/g"`	
	
		if [ -z "$ID" ] 
		then
			FAIL=1
			echo "Invalid type $TYPE in $FDEF" >> error_log
		fi
		
		#convert def files to proc files
		#process images
		grep -q -e '^IMG$' $FDEF
		if [ $? == 0 ]
		then
			sed -e '2,$d' $FDEF > $FPROC
			PAL=`sed -e '1,2d' -e '4,$d' $FDEF`
			echo -n -e "$ID\n$PAL\n" >> $FPROC
			sed -e '1,3d' $FDEF|while read frameline
			do
				frame=`echo "$frameline" | sed -e 's/^\([0-9]*\).*$/\1/g'`
				#bottom=`echo "$frameline" | sed -e 's/^.* [Bb]:\([0-9]*\).*$/\1/g' -e "s/^$frameline\$/0/g"`
				#left=`echo "$frameline" | sed -e 's/^.* [Ll]:\([0-9]*\).*$/\1/g' -e "s/^$frameline\$/0/g"`
				#right=`echo "$frameline" | sed -e 's/^.* [Rr]:\([0-9]*\).*$/\1/g' -e "s/^$frameline\$/0/g"`
				#echo -n -e "$frame\n$bottom\n$left\n$right\n">>$FPROC
				echo -n -e "$frame\n">>$FPROC
			done
		else
			sed -e "2,1s/.*/$ID/g" $FDEF > $FPROC
		fi
			
		#convert proc files to index files
		bin/makeindex $FPROC $FINDEX
	
		#add logs
		echo "  <item value=\"$number\" path=\"$definition.index\">$definition</item>" >> xml/resources.xml
		echo "$VARDEFINE $definition $number" >> result/data.h
	
		number=`expr $number + 1`
	done
fi

#finish files
cat xml/gen2.xml >> xml/resources.xml
echo -e "\n$VARDEFINE $VARDEFSTART $numberstart\n$VARDEFINE $VARDEFEND $number" >> result/data.h
if [ $FAIL == 1 ]
then
	echo -e "$SFAIL"
else
	echo -e "$SOK"

	#generate the dat file using the proceced indexes and the xml file
	echo -n "Generating dat file                          "
	bin/pr --import=index --force --backup=bak --resource=xml/resources.xml result 2>/dev/null >/dev/null
	FAIL=$?
	if [ $FAIL == 0 ] ; then
		echo -e "$SOK"
	else
		echo "PR error number $FAIL" >> error_log
		echo -e "$SFAIL"
	fi
fi

#print errors and exit
if [ $FAIL != 0 ]
then
	echo -e "\nPlease correct the following errors:\n"
	cat error_log > /dev/stderr
	rm error_log
fi


